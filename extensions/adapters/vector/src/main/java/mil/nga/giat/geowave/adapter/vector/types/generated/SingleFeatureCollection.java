/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package mil.nga.giat.geowave.adapter.vector.types.generated;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SingleFeatureCollection extends
		org.apache.avro.specific.SpecificRecordBase implements
		org.apache.avro.specific.SpecificRecord
{
	public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser()
			.parse("{\"type\":\"record\",\"name\":\"SingleFeatureCollection\",\"namespace\":\"mil.nga.giat.geowave.adapter.vector.types.generated\",\"fields\":[{\"name\":\"FeatureType\",\"type\":{\"type\":\"record\",\"name\":\"FeatureDefinition\",\"fields\":[{\"name\":\"FeatureTypeName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"AttributeNames\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"AttributeTypes\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"AttributeDefaultClassifications\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}}]}},{\"name\":\"Values\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AttributeValues\",\"fields\":[{\"name\":\"fid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"bytes\"}},{\"name\":\"classifications\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]}}}]}");

	public static org.apache.avro.Schema getClassSchema() {
		return SCHEMA$;
	}

	@Deprecated
	public mil.nga.giat.geowave.adapter.vector.types.generated.FeatureDefinition FeatureType;
	@Deprecated
	public java.util.List<mil.nga.giat.geowave.adapter.vector.types.generated.AttributeValues> Values;

	/**
	 * Default constructor. Note that this does not initialize fields to their
	 * default values from the schema. If that is desired then one should use
	 * <code>newBuilder()</code>.
	 */
	public SingleFeatureCollection() {}

	/**
	 * All-args constructor.
	 */
	public SingleFeatureCollection(
			mil.nga.giat.geowave.adapter.vector.types.generated.FeatureDefinition FeatureType,
			java.util.List<mil.nga.giat.geowave.adapter.vector.types.generated.AttributeValues> Values ) {
		this.FeatureType = FeatureType;
		this.Values = Values;
	}

	public org.apache.avro.Schema getSchema() {
		return SCHEMA$;
	}

	// Used by DatumWriter. Applications should not call.
	public java.lang.Object get(
			int field$ ) {
		switch (field$) {
			case 0:
				return FeatureType;
			case 1:
				return Values;
			default:
				throw new org.apache.avro.AvroRuntimeException(
						"Bad index");
		}
	}

	// Used by DatumReader. Applications should not call.
	@SuppressWarnings(value = "unchecked")
	public void put(
			int field$,
			java.lang.Object value$ ) {
		switch (field$) {
			case 0:
				FeatureType = (mil.nga.giat.geowave.adapter.vector.types.generated.FeatureDefinition) value$;
				break;
			case 1:
				Values = (java.util.List<mil.nga.giat.geowave.adapter.vector.types.generated.AttributeValues>) value$;
				break;
			default:
				throw new org.apache.avro.AvroRuntimeException(
						"Bad index");
		}
	}

	/**
	 * Gets the value of the 'FeatureType' field.
	 */
	public mil.nga.giat.geowave.adapter.vector.types.generated.FeatureDefinition getFeatureType() {
		return FeatureType;
	}

	/**
	 * Sets the value of the 'FeatureType' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setFeatureType(
			mil.nga.giat.geowave.adapter.vector.types.generated.FeatureDefinition value ) {
		this.FeatureType = value;
	}

	/**
	 * Gets the value of the 'Values' field.
	 */
	public java.util.List<mil.nga.giat.geowave.adapter.vector.types.generated.AttributeValues> getValues() {
		return Values;
	}

	/**
	 * Sets the value of the 'Values' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setValues(
			java.util.List<mil.nga.giat.geowave.adapter.vector.types.generated.AttributeValues> value ) {
		this.Values = value;
	}

	/** Creates a new SingleFeatureCollection RecordBuilder */
	public static mil.nga.giat.geowave.adapter.vector.types.generated.SingleFeatureCollection.Builder newBuilder() {
		return new mil.nga.giat.geowave.adapter.vector.types.generated.SingleFeatureCollection.Builder();
	}

	/**
	 * Creates a new SingleFeatureCollection RecordBuilder by copying an
	 * existing Builder
	 */
	public static mil.nga.giat.geowave.adapter.vector.types.generated.SingleFeatureCollection.Builder newBuilder(
			mil.nga.giat.geowave.adapter.vector.types.generated.SingleFeatureCollection.Builder other ) {
		return new mil.nga.giat.geowave.adapter.vector.types.generated.SingleFeatureCollection.Builder(
				other);
	}

	/**
	 * Creates a new SingleFeatureCollection RecordBuilder by copying an
	 * existing SingleFeatureCollection instance
	 */
	public static mil.nga.giat.geowave.adapter.vector.types.generated.SingleFeatureCollection.Builder newBuilder(
			mil.nga.giat.geowave.adapter.vector.types.generated.SingleFeatureCollection other ) {
		return new mil.nga.giat.geowave.adapter.vector.types.generated.SingleFeatureCollection.Builder(
				other);
	}

	/**
	 * RecordBuilder for SingleFeatureCollection instances.
	 */
	public static class Builder extends
			org.apache.avro.specific.SpecificRecordBuilderBase<SingleFeatureCollection> implements
			org.apache.avro.data.RecordBuilder<SingleFeatureCollection>
	{

		private mil.nga.giat.geowave.adapter.vector.types.generated.FeatureDefinition FeatureType;
		private java.util.List<mil.nga.giat.geowave.adapter.vector.types.generated.AttributeValues> Values;

		/** Creates a new Builder */
		private Builder() {
			super(
					mil.nga.giat.geowave.adapter.vector.types.generated.SingleFeatureCollection.SCHEMA$);
		}

		/** Creates a Builder by copying an existing Builder */
		private Builder(
				mil.nga.giat.geowave.adapter.vector.types.generated.SingleFeatureCollection.Builder other ) {
			super(
					other);
			if (isValidValue(
					fields()[0],
					other.FeatureType)) {
				this.FeatureType = data().deepCopy(
						fields()[0].schema(),
						other.FeatureType);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(
					fields()[1],
					other.Values)) {
				this.Values = data().deepCopy(
						fields()[1].schema(),
						other.Values);
				fieldSetFlags()[1] = true;
			}
		}

		/**
		 * Creates a Builder by copying an existing SingleFeatureCollection
		 * instance
		 */
		private Builder(
				mil.nga.giat.geowave.adapter.vector.types.generated.SingleFeatureCollection other ) {
			super(
					mil.nga.giat.geowave.adapter.vector.types.generated.SingleFeatureCollection.SCHEMA$);
			if (isValidValue(
					fields()[0],
					other.FeatureType)) {
				this.FeatureType = data().deepCopy(
						fields()[0].schema(),
						other.FeatureType);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(
					fields()[1],
					other.Values)) {
				this.Values = data().deepCopy(
						fields()[1].schema(),
						other.Values);
				fieldSetFlags()[1] = true;
			}
		}

		/** Gets the value of the 'FeatureType' field */
		public mil.nga.giat.geowave.adapter.vector.types.generated.FeatureDefinition getFeatureType() {
			return FeatureType;
		}

		/** Sets the value of the 'FeatureType' field */
		public mil.nga.giat.geowave.adapter.vector.types.generated.SingleFeatureCollection.Builder setFeatureType(
				mil.nga.giat.geowave.adapter.vector.types.generated.FeatureDefinition value ) {
			validate(
					fields()[0],
					value);
			this.FeatureType = value;
			fieldSetFlags()[0] = true;
			return this;
		}

		/** Checks whether the 'FeatureType' field has been set */
		public boolean hasFeatureType() {
			return fieldSetFlags()[0];
		}

		/** Clears the value of the 'FeatureType' field */
		public mil.nga.giat.geowave.adapter.vector.types.generated.SingleFeatureCollection.Builder clearFeatureType() {
			FeatureType = null;
			fieldSetFlags()[0] = false;
			return this;
		}

		/** Gets the value of the 'Values' field */
		public java.util.List<mil.nga.giat.geowave.adapter.vector.types.generated.AttributeValues> getValues() {
			return Values;
		}

		/** Sets the value of the 'Values' field */
		public mil.nga.giat.geowave.adapter.vector.types.generated.SingleFeatureCollection.Builder setValues(
				java.util.List<mil.nga.giat.geowave.adapter.vector.types.generated.AttributeValues> value ) {
			validate(
					fields()[1],
					value);
			this.Values = value;
			fieldSetFlags()[1] = true;
			return this;
		}

		/** Checks whether the 'Values' field has been set */
		public boolean hasValues() {
			return fieldSetFlags()[1];
		}

		/** Clears the value of the 'Values' field */
		public mil.nga.giat.geowave.adapter.vector.types.generated.SingleFeatureCollection.Builder clearValues() {
			Values = null;
			fieldSetFlags()[1] = false;
			return this;
		}

		@Override
		public SingleFeatureCollection build() {
			try {
				SingleFeatureCollection record = new SingleFeatureCollection();
				record.FeatureType = fieldSetFlags()[0] ? this.FeatureType : (mil.nga.giat.geowave.adapter.vector.types.generated.FeatureDefinition) defaultValue(fields()[0]);
				record.Values = fieldSetFlags()[1] ? this.Values : (java.util.List<mil.nga.giat.geowave.adapter.vector.types.generated.AttributeValues>) defaultValue(fields()[1]);
				return record;
			}
			catch (Exception e) {
				throw new org.apache.avro.AvroRuntimeException(
						e);
			}
		}
	}
}
