/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package mil.nga.giat.geowave.adapter.vector.types.generated;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ExportMetadata extends
		org.apache.avro.specific.SpecificRecordBase implements
		org.apache.avro.specific.SpecificRecord
{
	public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ExportMetadata\",\"namespace\":\"mil.nga.giat.geowave.adapter.vector.types.generated\",\"fields\":[{\"name\":\"IndexId\",\"type\":\"bytes\"},{\"name\":\"ConfiguredStatistics\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}}]}");

	public static org.apache.avro.Schema getClassSchema() {
		return SCHEMA$;
	}

	@Deprecated
	public java.nio.ByteBuffer IndexId;
	@Deprecated
	public java.util.List<java.lang.String> ConfiguredStatistics;

	/**
	 * Default constructor. Note that this does not initialize fields to their
	 * default values from the schema. If that is desired then one should use
	 * <code>newBuilder()</code>.
	 */
	public ExportMetadata() {}

	/**
	 * All-args constructor.
	 */
	public ExportMetadata(
			java.nio.ByteBuffer IndexId,
			java.util.List<java.lang.String> ConfiguredStatistics ) {
		this.IndexId = IndexId;
		this.ConfiguredStatistics = ConfiguredStatistics;
	}

	public org.apache.avro.Schema getSchema() {
		return SCHEMA$;
	}

	// Used by DatumWriter. Applications should not call.
	public java.lang.Object get(
			int field$ ) {
		switch (field$) {
			case 0:
				return IndexId;
			case 1:
				return ConfiguredStatistics;
			default:
				throw new org.apache.avro.AvroRuntimeException(
						"Bad index");
		}
	}

	// Used by DatumReader. Applications should not call.
	@SuppressWarnings(value = "unchecked")
	public void put(
			int field$,
			java.lang.Object value$ ) {
		switch (field$) {
			case 0:
				IndexId = (java.nio.ByteBuffer) value$;
				break;
			case 1:
				ConfiguredStatistics = (java.util.List<java.lang.String>) value$;
				break;
			default:
				throw new org.apache.avro.AvroRuntimeException(
						"Bad index");
		}
	}

	/**
	 * Gets the value of the 'IndexId' field.
	 */
	public java.nio.ByteBuffer getIndexId() {
		return IndexId;
	}

	/**
	 * Sets the value of the 'IndexId' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setIndexId(
			java.nio.ByteBuffer value ) {
		this.IndexId = value;
	}

	/**
	 * Gets the value of the 'ConfiguredStatistics' field.
	 */
	public java.util.List<java.lang.String> getConfiguredStatistics() {
		return ConfiguredStatistics;
	}

	/**
	 * Sets the value of the 'ConfiguredStatistics' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setConfiguredStatistics(
			java.util.List<java.lang.String> value ) {
		this.ConfiguredStatistics = value;
	}

	/** Creates a new ExportMetadata RecordBuilder */
	public static mil.nga.giat.geowave.adapter.vector.types.generated.ExportMetadata.Builder newBuilder() {
		return new mil.nga.giat.geowave.adapter.vector.types.generated.ExportMetadata.Builder();
	}

	/**
	 * Creates a new ExportMetadata RecordBuilder by copying an existing Builder
	 */
	public static mil.nga.giat.geowave.adapter.vector.types.generated.ExportMetadata.Builder newBuilder(
			mil.nga.giat.geowave.adapter.vector.types.generated.ExportMetadata.Builder other ) {
		return new mil.nga.giat.geowave.adapter.vector.types.generated.ExportMetadata.Builder(
				other);
	}

	/**
	 * Creates a new ExportMetadata RecordBuilder by copying an existing
	 * ExportMetadata instance
	 */
	public static mil.nga.giat.geowave.adapter.vector.types.generated.ExportMetadata.Builder newBuilder(
			mil.nga.giat.geowave.adapter.vector.types.generated.ExportMetadata other ) {
		return new mil.nga.giat.geowave.adapter.vector.types.generated.ExportMetadata.Builder(
				other);
	}

	/**
	 * RecordBuilder for ExportMetadata instances.
	 */
	public static class Builder extends
			org.apache.avro.specific.SpecificRecordBuilderBase<ExportMetadata> implements
			org.apache.avro.data.RecordBuilder<ExportMetadata>
	{

		private java.nio.ByteBuffer IndexId;
		private java.util.List<java.lang.String> ConfiguredStatistics;

		/** Creates a new Builder */
		private Builder() {
			super(
					mil.nga.giat.geowave.adapter.vector.types.generated.ExportMetadata.SCHEMA$);
		}

		/** Creates a Builder by copying an existing Builder */
		private Builder(
				mil.nga.giat.geowave.adapter.vector.types.generated.ExportMetadata.Builder other ) {
			super(
					other);
			if (isValidValue(
					fields()[0],
					other.IndexId)) {
				this.IndexId = data().deepCopy(
						fields()[0].schema(),
						other.IndexId);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(
					fields()[1],
					other.ConfiguredStatistics)) {
				this.ConfiguredStatistics = data().deepCopy(
						fields()[1].schema(),
						other.ConfiguredStatistics);
				fieldSetFlags()[1] = true;
			}
		}

		/** Creates a Builder by copying an existing ExportMetadata instance */
		private Builder(
				mil.nga.giat.geowave.adapter.vector.types.generated.ExportMetadata other ) {
			super(
					mil.nga.giat.geowave.adapter.vector.types.generated.ExportMetadata.SCHEMA$);
			if (isValidValue(
					fields()[0],
					other.IndexId)) {
				this.IndexId = data().deepCopy(
						fields()[0].schema(),
						other.IndexId);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(
					fields()[1],
					other.ConfiguredStatistics)) {
				this.ConfiguredStatistics = data().deepCopy(
						fields()[1].schema(),
						other.ConfiguredStatistics);
				fieldSetFlags()[1] = true;
			}
		}

		/** Gets the value of the 'IndexId' field */
		public java.nio.ByteBuffer getIndexId() {
			return IndexId;
		}

		/** Sets the value of the 'IndexId' field */
		public mil.nga.giat.geowave.adapter.vector.types.generated.ExportMetadata.Builder setIndexId(
				java.nio.ByteBuffer value ) {
			validate(
					fields()[0],
					value);
			this.IndexId = value;
			fieldSetFlags()[0] = true;
			return this;
		}

		/** Checks whether the 'IndexId' field has been set */
		public boolean hasIndexId() {
			return fieldSetFlags()[0];
		}

		/** Clears the value of the 'IndexId' field */
		public mil.nga.giat.geowave.adapter.vector.types.generated.ExportMetadata.Builder clearIndexId() {
			IndexId = null;
			fieldSetFlags()[0] = false;
			return this;
		}

		/** Gets the value of the 'ConfiguredStatistics' field */
		public java.util.List<java.lang.String> getConfiguredStatistics() {
			return ConfiguredStatistics;
		}

		/** Sets the value of the 'ConfiguredStatistics' field */
		public mil.nga.giat.geowave.adapter.vector.types.generated.ExportMetadata.Builder setConfiguredStatistics(
				java.util.List<java.lang.String> value ) {
			validate(
					fields()[1],
					value);
			this.ConfiguredStatistics = value;
			fieldSetFlags()[1] = true;
			return this;
		}

		/** Checks whether the 'ConfiguredStatistics' field has been set */
		public boolean hasConfiguredStatistics() {
			return fieldSetFlags()[1];
		}

		/** Clears the value of the 'ConfiguredStatistics' field */
		public mil.nga.giat.geowave.adapter.vector.types.generated.ExportMetadata.Builder clearConfiguredStatistics() {
			ConfiguredStatistics = null;
			fieldSetFlags()[1] = false;
			return this;
		}

		@Override
		public ExportMetadata build() {
			try {
				ExportMetadata record = new ExportMetadata();
				record.IndexId = fieldSetFlags()[0] ? this.IndexId : (java.nio.ByteBuffer) defaultValue(fields()[0]);
				record.ConfiguredStatistics = fieldSetFlags()[1] ? this.ConfiguredStatistics : (java.util.List<java.lang.String>) defaultValue(fields()[1]);
				return record;
			}
			catch (Exception e) {
				throw new org.apache.avro.AvroRuntimeException(
						e);
			}
		}
	}
}
