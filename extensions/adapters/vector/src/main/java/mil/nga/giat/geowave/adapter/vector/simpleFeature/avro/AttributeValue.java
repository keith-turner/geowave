/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package mil.nga.giat.geowave.adapter.vector.simpleFeature.avro;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AttributeValue extends
		org.apache.avro.specific.SpecificRecordBase implements
		org.apache.avro.specific.SpecificRecord
{
	public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AttributeValue\",\"namespace\":\"mil.nga.giat.geowave.adapter.vector.simpleFeature.avro\",\"fields\":[{\"name\":\"fid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":\"bytes\"}},{\"name\":\"classifications\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]}");

	public static org.apache.avro.Schema getClassSchema() {
		return SCHEMA$;
	}

	@Deprecated
	public java.lang.String fid;
	@Deprecated
	public java.util.List<java.nio.ByteBuffer> values;
	@Deprecated
	public java.util.List<java.lang.String> classifications;

	/**
	 * Default constructor. Note that this does not initialize fields to their
	 * default values from the schema. If that is desired then one should use
	 * <code>newBuilder()</code>.
	 */
	public AttributeValue() {}

	/**
	 * All-args constructor.
	 */
	public AttributeValue(
			java.lang.String fid,
			java.util.List<java.nio.ByteBuffer> values,
			java.util.List<java.lang.String> classifications ) {
		this.fid = fid;
		this.values = values;
		this.classifications = classifications;
	}

	public org.apache.avro.Schema getSchema() {
		return SCHEMA$;
	}

	// Used by DatumWriter. Applications should not call.
	public java.lang.Object get(
			int field$ ) {
		switch (field$) {
			case 0:
				return fid;
			case 1:
				return values;
			case 2:
				return classifications;
			default:
				throw new org.apache.avro.AvroRuntimeException(
						"Bad index");
		}
	}

	// Used by DatumReader. Applications should not call.
	@SuppressWarnings(value = "unchecked")
	public void put(
			int field$,
			java.lang.Object value$ ) {
		switch (field$) {
			case 0:
				fid = (java.lang.String) value$;
				break;
			case 1:
				values = (java.util.List<java.nio.ByteBuffer>) value$;
				break;
			case 2:
				classifications = (java.util.List<java.lang.String>) value$;
				break;
			default:
				throw new org.apache.avro.AvroRuntimeException(
						"Bad index");
		}
	}

	/**
	 * Gets the value of the 'fid' field.
	 */
	public java.lang.String getFid() {
		return fid;
	}

	/**
	 * Sets the value of the 'fid' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setFid(
			java.lang.String value ) {
		this.fid = value;
	}

	/**
	 * Gets the value of the 'values' field.
	 */
	public java.util.List<java.nio.ByteBuffer> getValues() {
		return values;
	}

	/**
	 * Sets the value of the 'values' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setValues(
			java.util.List<java.nio.ByteBuffer> value ) {
		this.values = value;
	}

	/**
	 * Gets the value of the 'classifications' field.
	 */
	public java.util.List<java.lang.String> getClassifications() {
		return classifications;
	}

	/**
	 * Sets the value of the 'classifications' field.
	 * 
	 * @param value
	 *            the value to set.
	 */
	public void setClassifications(
			java.util.List<java.lang.String> value ) {
		this.classifications = value;
	}

	/** Creates a new AttributeValue RecordBuilder */
	public static mil.nga.giat.geowave.adapter.vector.simpleFeature.avro.AttributeValue.Builder newBuilder() {
		return new mil.nga.giat.geowave.adapter.vector.simpleFeature.avro.AttributeValue.Builder();
	}

	/**
	 * Creates a new AttributeValue RecordBuilder by copying an existing Builder
	 */
	public static mil.nga.giat.geowave.adapter.vector.simpleFeature.avro.AttributeValue.Builder newBuilder(
			mil.nga.giat.geowave.adapter.vector.simpleFeature.avro.AttributeValue.Builder other ) {
		return new mil.nga.giat.geowave.adapter.vector.simpleFeature.avro.AttributeValue.Builder(
				other);
	}

	/**
	 * Creates a new AttributeValue RecordBuilder by copying an existing
	 * AttributeValue instance
	 */
	public static mil.nga.giat.geowave.adapter.vector.simpleFeature.avro.AttributeValue.Builder newBuilder(
			mil.nga.giat.geowave.adapter.vector.simpleFeature.avro.AttributeValue other ) {
		return new mil.nga.giat.geowave.adapter.vector.simpleFeature.avro.AttributeValue.Builder(
				other);
	}

	/**
	 * RecordBuilder for AttributeValue instances.
	 */
	public static class Builder extends
			org.apache.avro.specific.SpecificRecordBuilderBase<AttributeValue> implements
			org.apache.avro.data.RecordBuilder<AttributeValue>
	{

		private java.lang.String fid;
		private java.util.List<java.nio.ByteBuffer> values;
		private java.util.List<java.lang.String> classifications;

		/** Creates a new Builder */
		private Builder() {
			super(
					mil.nga.giat.geowave.adapter.vector.simpleFeature.avro.AttributeValue.SCHEMA$);
		}

		/** Creates a Builder by copying an existing Builder */
		private Builder(
				mil.nga.giat.geowave.adapter.vector.simpleFeature.avro.AttributeValue.Builder other ) {
			super(
					other);
			if (isValidValue(
					fields()[0],
					other.fid)) {
				this.fid = data().deepCopy(
						fields()[0].schema(),
						other.fid);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(
					fields()[1],
					other.values)) {
				this.values = data().deepCopy(
						fields()[1].schema(),
						other.values);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(
					fields()[2],
					other.classifications)) {
				this.classifications = data().deepCopy(
						fields()[2].schema(),
						other.classifications);
				fieldSetFlags()[2] = true;
			}
		}

		/** Creates a Builder by copying an existing AttributeValue instance */
		private Builder(
				mil.nga.giat.geowave.adapter.vector.simpleFeature.avro.AttributeValue other ) {
			super(
					mil.nga.giat.geowave.adapter.vector.simpleFeature.avro.AttributeValue.SCHEMA$);
			if (isValidValue(
					fields()[0],
					other.fid)) {
				this.fid = data().deepCopy(
						fields()[0].schema(),
						other.fid);
				fieldSetFlags()[0] = true;
			}
			if (isValidValue(
					fields()[1],
					other.values)) {
				this.values = data().deepCopy(
						fields()[1].schema(),
						other.values);
				fieldSetFlags()[1] = true;
			}
			if (isValidValue(
					fields()[2],
					other.classifications)) {
				this.classifications = data().deepCopy(
						fields()[2].schema(),
						other.classifications);
				fieldSetFlags()[2] = true;
			}
		}

		/** Gets the value of the 'fid' field */
		public java.lang.String getFid() {
			return fid;
		}

		/** Sets the value of the 'fid' field */
		public mil.nga.giat.geowave.adapter.vector.simpleFeature.avro.AttributeValue.Builder setFid(
				java.lang.String value ) {
			validate(
					fields()[0],
					value);
			this.fid = value;
			fieldSetFlags()[0] = true;
			return this;
		}

		/** Checks whether the 'fid' field has been set */
		public boolean hasFid() {
			return fieldSetFlags()[0];
		}

		/** Clears the value of the 'fid' field */
		public mil.nga.giat.geowave.adapter.vector.simpleFeature.avro.AttributeValue.Builder clearFid() {
			fid = null;
			fieldSetFlags()[0] = false;
			return this;
		}

		/** Gets the value of the 'values' field */
		public java.util.List<java.nio.ByteBuffer> getValues() {
			return values;
		}

		/** Sets the value of the 'values' field */
		public mil.nga.giat.geowave.adapter.vector.simpleFeature.avro.AttributeValue.Builder setValues(
				java.util.List<java.nio.ByteBuffer> value ) {
			validate(
					fields()[1],
					value);
			this.values = value;
			fieldSetFlags()[1] = true;
			return this;
		}

		/** Checks whether the 'values' field has been set */
		public boolean hasValues() {
			return fieldSetFlags()[1];
		}

		/** Clears the value of the 'values' field */
		public mil.nga.giat.geowave.adapter.vector.simpleFeature.avro.AttributeValue.Builder clearValues() {
			values = null;
			fieldSetFlags()[1] = false;
			return this;
		}

		/** Gets the value of the 'classifications' field */
		public java.util.List<java.lang.String> getClassifications() {
			return classifications;
		}

		/** Sets the value of the 'classifications' field */
		public mil.nga.giat.geowave.adapter.vector.simpleFeature.avro.AttributeValue.Builder setClassifications(
				java.util.List<java.lang.String> value ) {
			validate(
					fields()[2],
					value);
			this.classifications = value;
			fieldSetFlags()[2] = true;
			return this;
		}

		/** Checks whether the 'classifications' field has been set */
		public boolean hasClassifications() {
			return fieldSetFlags()[2];
		}

		/** Clears the value of the 'classifications' field */
		public mil.nga.giat.geowave.adapter.vector.simpleFeature.avro.AttributeValue.Builder clearClassifications() {
			classifications = null;
			fieldSetFlags()[2] = false;
			return this;
		}

		@Override
		public AttributeValue build() {
			try {
				AttributeValue record = new AttributeValue();
				record.fid = fieldSetFlags()[0] ? this.fid : (java.lang.String) defaultValue(fields()[0]);
				record.values = fieldSetFlags()[1] ? this.values : (java.util.List<java.nio.ByteBuffer>) defaultValue(fields()[1]);
				record.classifications = fieldSetFlags()[2] ? this.classifications : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
				return record;
			}
			catch (Exception e) {
				throw new org.apache.avro.AvroRuntimeException(
						e);
			}
		}
	}
}
